> C'de wchar_t türü: C standartlarında wchar_t isimli bir tür belirtilmiştir. Ancak wchar_t C'de bir anahtar sözcük değil typedef ismidir. Bu tür aşağıdaki başlık dosyalarında typedef edilmiştir:
    
    <stddef.h>
    <stdlib.h>
    <wchar.h>

C standartları bu türün herhangi bir tamsayı türü olarak typedef edilmesi gerektiğini belirtmektedir. Ancak hangi tür olarak typedef edileceği derleyicileri yazanların isteğine bırakılmıştır. Microsoft C
derleyicilerinde wchar_t türü unsigned short int olarak typedef edilmiştir. gcc ve clang derleyicilerinde ise wchar_t türü unsigned int olarak typedef edilmiştir. wchar_t türü karakterleri bir byte'tan uzun olan
karakter tablolarının karakterlerini temsil etmek için düşünülmüştür. Ancak C standartları wchar_t türünün hangi karakter tablosunu temsil edeceği konusunda bir belirlemede bulunmamıştır. Microsoft'un C ve C++
derleyicilerinde wchar_t türü UNICODE UTF-16 encoding'ini temsil etmektedir. gcc ve clang derleyicilerinde ise wchar_t türü UNICODE UTF-32 encoding'ini temsil etmektedir. C standartlarında wchar_t türünden
karakter sabitleri tek tırnağa bitişik L ile ifade edilmektedir. Örneğin:

    wchar_t ch = L'ş';

Benzer biçimde wchar_t türünden yazılar da yine iki tırnağa bitişik L harfile temsil edilmektedir. Örneğin:

    wchar_t s[] = L"ağrı dağı";
    char_t *ps = L"kpnya ovası";

Aşağıdaki ilkdeğer vermeler geçersizdir:

    wchar_t s[] = "ağrı dağı";		/* geçersiz! */
    char k[] = L"ağrı dağı";		/* geçersiz! */

O halde bir fonksiyon bizden bir UNICODE yazı isteyecekse onu "char *" türü ile değil "wchar_t *" türüyle istemelidir. Bizim de o fonksiyona yazıyı L önekli bir string ile vermemiz gerekir. Öte yandan C'deki
klasik string fonksiyonları bir byte'lık karakter tabloları için düşünülmüştür. Örneğin strlen fonksiyonu null karakter görene kadar birer byte'lık karakterlerin sayısını bize verir. printf fonksiyonu bir byte'lık
karakter tablosuna ilişkin yazıları stdout dosyasına yazdırmaktadır. İşte C'de <wchar.h> dosyası içerisinde "wide character" türü ile çalışabilen standrat C fonksiyonları da bulundurulmuştur. char türü ile çalışan
standart C fonksiyonlarının isimleri strxxx olmak üzere wchar_t türü ile çalışan standart C fonksiyonlarının isimleri wcsxxx biçimindedir. Örneğin bir bir UNICODE yazının uzunluğunu strlen ile elde edemeyiz. Bunun
için bizim wcslen fonksiyonunu kullanmamız gerekir. printf fonksiyonun wchar_t ile çalışan biçiminin ismi wprintf biçimindedir. C standartlarından ya da ilgili dokğmanlardan char türü ile çalışan fonksiyonların
wchar_t türü ile çalışan versiyonlarının isimlerine bakabilirsiniz. Örneğin:

    wchar_t s[] = L"ali";
    wprintf(L"%zd\n", wcslen(s));

> Hatırlatıcı Notlar:
    >> Anımsayacağınız üzere C dilinde "char" türü dışındaki türlerin kaç "byte" yer kaplayacağı, bazı asgari kısıtlar konularak,
    derleyicileri yazanlara bırakılmıştır. Windows ve Linux sistemlerinde 32-bit ve 64-bit C ve C++ derleyicilerinde, "int" türü
    dört "byte" yer kaplamaktadır. 32-bit ve 64-bit Windows sistemlerinde "long" türü de dört "byte" yer kaplamaktadır. Ancak 64-bit 
    Linux sisteminde "long" türü sekiz "byte" uzunluk kaplamaktadır. C11 ile birlikte "long long" türü ise bütün sistemlerde sekiz 
    "byte" uzunluktadır.  

    >> 	Bir bildirim işleminin C'deki genel biçimi şöyledir:
	
	    <tür belirleyicisi> [yer belirleyicisi] [tür niteleyicileri] <dekleratör> [= <ilkdeğer], <dekleratör> [= <ilkdeğer], ...;

	Tür belirten belirleyici ve niteleyicilerinin dışında kalan ve ilkdeğerlerin dışında kalan atom grubuna teknik terminolojide "dekleratör
    (declarator)" denilmektedir. Örneğin:

	    int a = 10, *pi = &a, *b[10];

	Burada a, *pi, ve *b[10] birer dekleratördür. Bildirimdeki türün tüm dekleratörlerin türü olduğunda dikkat ediniz. Örneğin:

	    int a = 10, *pi = &a, *b[20];

	Barada a'nın, *pi'nin *b[20]'nin türleri int biçimdedir. Başka bir deyişle burada a int türden bir değişken, pi int türden bir gösterici
    ve b de int türden bir göstericisi dizisidir. 

    >> Aslında POSIX'teki bütün "typedef" isimleri toplu halde "<sys/types.h>" içerisinde typedef edilmiş durumdadır. Ancak kolaylık sağlamak
    amacıyla bazı "typedef" isimleri "<sys/types.h>" dosyasının yanı sıra başka başlık dosyalarında da "typedef" edilmiş durumdadır. 
